import { GetMessageType } from "../../types";
import { TDaemon } from "../../../daemon/index";
import { bool, False, int, None, Optional, str, True, uint32 } from "../../chia/types/_python_types_";
import { chiapos_install_info } from "../../chia/plotters/chiapos";
import { bladebit_install_info } from "../../chia/plotters/bladebit";
import { madmax_install_info } from "../../chia/plotters/maxmax";
import { KeyData } from "../../chia/util/keychain";
export declare const daemon_service = "daemon";
export declare type daemon_service = typeof daemon_service;
export declare const ping_command = "ping";
export declare type ping_command = typeof ping_command;
export declare type TPingRequest = {};
export declare type TPingResponse = {
    success: True;
    value: str;
};
export declare type WsPingMessage = GetMessageType<daemon_service, ping_command, TPingResponse>;
export declare function ping(daemon: TDaemon): Promise<WsPingMessage>;
export declare type TService = "chia" | "chia_wallet" | "chia_full_node" | "chia_harvester" | "chia_farmer" | "chia_introducer" | "chia_timelord" | "chia_timelord_launcher" | "chia_full_node_simulator";
export declare const start_service_command = "start_service";
export declare type start_service_command = typeof start_service_command;
export declare type TStartServiceRequest = {
    service: TService;
    testing?: bool;
};
export declare type TStartServiceResponse = {
    success: bool;
    service: TService;
    error: Optional<str>;
};
export declare type WsStartServiceMessage = GetMessageType<daemon_service, start_service_command, TStartServiceResponse>;
export declare function start_service(daemon: TDaemon, data: TStartServiceRequest): Promise<WsStartServiceMessage>;
export declare const start_plotting_command = "start_plotting";
export declare type start_plotting_command = typeof start_plotting_command;
export declare type TCommonPlottingParams = {
    service: "chia_plotter";
    delay?: int;
    parallel?: bool;
    k: int;
    t: str;
    d: str;
    x?: bool;
    n?: int;
    queue?: str;
    r: int;
    f?: str;
    p?: str;
    c?: str;
};
export declare type TChiaPosParams = {
    plotter: "chiapos";
    t2: str;
    b: int;
    u: int;
    a?: int;
    e: bool;
    overrideK: bool;
};
export declare type TBladeBitRamParams = {
    plotter: "bladebit";
    plot_type: "ramplot";
    w?: bool;
    m?: bool;
    no_cpu_affinity?: bool;
};
export declare type TBladeBitDiskParams = {
    plotter: "bladebit";
    plot_type: "diskplot";
    w?: bool;
    m?: bool;
    no_cpu_affinity?: bool;
    t1: str;
    t2?: str;
    u?: int;
    cache?: str;
    f1_threads?: int;
    fp_threads?: int;
    c_threads?: int;
    p2_threads?: int;
    p3_threads?: int;
    alternate?: bool;
    no_t1_direct?: bool;
    no_t2_direct?: bool;
};
export declare type TMadMaxParams = {
    plotter: "madmax";
    t2: str;
    b: int;
    u: int;
    v: int;
    K?: int;
    G?: bool;
};
export declare type TStartPlottingRequest = TCommonPlottingParams & (TChiaPosParams | TBladeBitRamParams | TBladeBitDiskParams | TMadMaxParams);
export declare type TStartPlottingResponse = {
    success: bool;
    ids: str[];
    service_name: str;
};
export declare type WsStartPlottingMessage = GetMessageType<daemon_service, start_plotting_command, TStartPlottingResponse>;
export declare function start_plotting(daemon: TDaemon, data: TStartPlottingRequest): Promise<WsStartPlottingMessage>;
export declare const stop_plotting_command = "stop_plotting";
export declare type stop_plotting_command = typeof stop_plotting_command;
export declare type TStopPlottingRequest = {
    id: str;
};
export declare type TStopPlottingResponse = {
    success: bool;
};
export declare type WsStopPlottingMessage = GetMessageType<daemon_service, stop_plotting_command, TStopPlottingResponse>;
export declare function stop_plotting(daemon: TDaemon, data: TStopPlottingRequest): Promise<WsStopPlottingMessage>;
export declare const stop_service_command = "stop_service";
export declare type stop_service_command = typeof stop_service_command;
export declare type TStopServiceRequest = {
    service: str;
};
export declare type TStopServiceResponse = {
    success: bool;
    service_name: str;
};
export declare type WsStopServiceMessage = GetMessageType<daemon_service, stop_service_command, TStopServiceResponse>;
export declare function stop_service(daemon: TDaemon, data: TStopServiceRequest): Promise<WsStopServiceMessage>;
export declare const running_services_command = "running_services";
export declare type running_services_command = typeof running_services_command;
export declare type TRunningServicesResponse = {
    success: bool;
    running_services: str[];
};
export declare type WsRunningServicesMessage = GetMessageType<daemon_service, running_services_command, TRunningServicesResponse>;
export declare function running_services(daemon: TDaemon): Promise<WsRunningServicesMessage>;
export declare const is_running_command = "is_running";
export declare type is_running_command = typeof is_running_command;
export declare type TIsRunningRequest = {
    service: str;
};
export declare type TIsRunningResponse = {
    success: bool;
    service_name: str;
    is_running: bool;
};
export declare type WsIsRunningMessage = GetMessageType<daemon_service, is_running_command, TIsRunningResponse>;
export declare function is_running(daemon: TDaemon, data: TIsRunningRequest): Promise<WsIsRunningMessage>;
export declare const add_private_key_command = "add_private_key";
export declare type add_private_key_command = typeof add_private_key_command;
export declare type TAddPrivateKeyRequest = {
    kc_user?: str;
    kc_testing?: bool;
    mnemonic?: str;
    label?: str;
};
export declare type TAddPrivateKeyResponse = {
    success: bool;
    error?: str;
    error_details?: {
        message: str;
    };
};
export declare type WsAddPrivateKeyMessage = GetMessageType<daemon_service, add_private_key_command, TAddPrivateKeyResponse>;
export declare function add_private_key(daemon: TDaemon, data: TAddPrivateKeyRequest): Promise<WsAddPrivateKeyMessage>;
export declare const check_keys_command = "check_keys";
export declare type check_keys_command = typeof check_keys_command;
export declare type TCheckKeysRequest = {
    kc_user?: str;
    kc_testing?: bool;
    root_path: str;
};
export declare type TCheckKeysResponse = {
    success: bool;
    error?: str;
    error_details?: {
        message: str;
    };
};
export declare type WsCheckKeysMessage = GetMessageType<daemon_service, check_keys_command, TCheckKeysResponse>;
export declare function check_keys(daemon: TDaemon, data: TCheckKeysRequest): Promise<WsCheckKeysMessage>;
export declare const delete_all_keys_command = "delete_all_keys";
export declare type delete_all_keys_command = typeof delete_all_keys_command;
export declare type TDeleteAllKeysRequest = {
    kc_user?: str;
    kc_testing?: bool;
};
export declare type TDeleteAllKeysResponse = {
    success: bool;
    error?: str;
    error_details?: {
        message: str;
    };
};
export declare type WsDeleteAllKeysMessage = GetMessageType<daemon_service, delete_all_keys_command, TDeleteAllKeysResponse>;
export declare function delete_all_keys(daemon: TDaemon, data: TDeleteAllKeysRequest): Promise<WsDeleteAllKeysMessage>;
export declare const delete_key_by_fingerprint_command = "delete_key_by_fingerprint";
export declare type delete_key_by_fingerprint_command = typeof delete_key_by_fingerprint_command;
export declare type TDeleteKeyByFingerprintRequest = {
    kc_user?: str;
    kc_testing?: bool;
    fingerprint: int;
};
export declare type TDeleteKeyByFingerprintResponse = {
    success: bool;
    error?: str;
    error_details?: {
        message: str;
    };
};
export declare type WsDeleteKeyByFingerprintMessage = GetMessageType<daemon_service, delete_key_by_fingerprint_command, TDeleteKeyByFingerprintResponse>;
export declare function delete_key_by_fingerprint(daemon: TDaemon, data: TDeleteKeyByFingerprintRequest): Promise<WsDeleteKeyByFingerprintMessage>;
export declare const get_all_private_keys_command = "get_all_private_keys";
export declare type get_all_private_keys_command = typeof get_all_private_keys_command;
export declare type TGetAllPrivateKeysRequest = {
    kc_user?: str;
    kc_testing?: bool;
};
export declare type TGetAllPrivateKeysResponse = {
    success: bool;
    error?: str;
    private_keys: Array<{
        pk: str;
        entropy: str;
    }>;
};
export declare type WsGetAllPrivateKeysMessage = GetMessageType<daemon_service, get_all_private_keys_command, TGetAllPrivateKeysResponse>;
export declare function get_all_private_keys(daemon: TDaemon, data: TGetAllPrivateKeysRequest): Promise<WsGetAllPrivateKeysMessage>;
export declare const get_first_private_key_command = "get_first_private_key";
export declare type get_first_private_key_command = typeof get_first_private_key_command;
export declare type TGetFirstPrivateKeyRequest = {
    kc_user?: str;
    kc_testing?: bool;
};
export declare type TGetFirstPrivateKeyResponse = {
    success: bool;
    error?: str;
    private_key: {
        pk: str;
        entropy: str;
    };
};
export declare type WsGetFirstPrivateKeyMessage = GetMessageType<daemon_service, get_first_private_key_command, TGetFirstPrivateKeyResponse>;
export declare function get_first_private_key(daemon: TDaemon, data: TGetFirstPrivateKeyRequest): Promise<WsGetFirstPrivateKeyMessage>;
export declare const get_key_for_fingerprint_command = "get_key_for_fingerprint";
export declare type get_key_for_fingerprint_command = typeof get_key_for_fingerprint_command;
export declare type TGetKeyForFingerprintRequest = {
    kc_user?: str;
    kc_testing?: bool;
    fingerprint?: int;
};
export declare type TGetKeyForFingerprintResponse = {
    success: bool;
    error?: str;
    pk: str;
    entropy: str;
};
export declare type WsGetKeyForFingerprintMessage = GetMessageType<daemon_service, get_key_for_fingerprint_command, TGetKeyForFingerprintResponse>;
export declare function get_key_for_fingerprint(daemon: TDaemon, data: TGetKeyForFingerprintRequest): Promise<WsGetKeyForFingerprintMessage>;
export declare const get_key_command = "get_key";
export declare type get_key_command = typeof get_key_command;
export declare type TGetKeyRequest = {
    fingerprint: uint32;
    include_secrets?: bool;
};
export declare type TGetKeyResponse = {
    success: True;
    key: KeyData;
} | {
    success: False;
    error: "keyring is locked" | "key not found" | "malformed request";
    error_details?: {
        message: str;
    } | {
        fingerprint: int;
    };
};
export declare type WsGetKeyMessage = GetMessageType<daemon_service, get_key_command, TGetKeyResponse>;
export declare function get_key(daemon: TDaemon, data: TGetKeyRequest): Promise<WsGetKeyMessage>;
export declare const get_keys_command = "get_keys";
export declare type get_keys_command = typeof get_keys_command;
export declare type TGetKeysRequest = {
    include_secrets?: bool;
};
export declare type TGetKeysResponse = {
    success: True;
    keys: KeyData[];
} | {
    success: False;
    error: "keyring is locked" | "key not found" | "malformed request";
    error_details?: {
        message: str;
    } | {
        fingerprint: int;
    };
};
export declare type WsGetKeysMessage = GetMessageType<daemon_service, get_keys_command, TGetKeysResponse>;
export declare function get_keys(daemon: TDaemon, data: TGetKeysRequest): Promise<WsGetKeysMessage>;
export declare const set_label_command = "set_label";
export declare type set_label_command = typeof set_label_command;
export declare type TSetLabelRequest = {
    fingerprint: uint32;
    label: str;
};
export declare type TSetLabelResponse = {
    success: True;
} | {
    success: False;
    error: "keyring is locked" | "key not found" | "malformed request";
    error_details?: {
        message: str;
    } | {
        fingerprint: int;
    };
};
export declare type WsSetLabelMessage = GetMessageType<daemon_service, set_label_command, TSetLabelResponse>;
export declare function set_label(daemon: TDaemon, data: TSetLabelRequest): Promise<WsSetLabelMessage>;
export declare const delete_label_command = "delete_label";
export declare type delete_label_command = typeof delete_label_command;
export declare type TDeleteLabelRequest = {
    fingerprint: uint32;
};
export declare type TDeleteLabelResponse = {
    success: True;
} | {
    success: False;
    error: "keyring is locked" | "key not found" | "malformed request";
    error_details?: {
        message: str;
    } | {
        fingerprint: int;
    };
};
export declare type WsDeleteLabelMessage = GetMessageType<daemon_service, delete_label_command, TDeleteLabelResponse>;
export declare function delete_label(daemon: TDaemon, data: TDeleteLabelRequest): Promise<WsDeleteLabelMessage>;
export declare const is_keyring_locked_command = "is_keyring_locked";
export declare type is_keyring_locked_command = typeof is_keyring_locked_command;
export declare type TIsKeyringLockedResponse = {
    success: bool;
    is_keyring_locked: bool;
};
export declare type WsIsKeyringLockedMessage = GetMessageType<daemon_service, is_keyring_locked_command, TIsKeyringLockedResponse>;
export declare function is_keyring_locked(daemon: TDaemon): Promise<WsIsKeyringLockedMessage>;
export declare const keyring_status_command = "keyring_status";
export declare type keyring_status_command = typeof keyring_status_command;
export declare type TKeyringStatusResponse = {
    success: bool;
    is_keyring_locked: bool;
    passphrase_support_enabled: bool;
    can_save_passphrase: bool;
    user_passphrase_is_set: bool;
    can_set_passphrase_hint: bool;
    passphrase_hint: str;
    passphrase_requirements: {} | {
        is_optional: True;
        min_length: int;
    };
};
export declare type WsKeyringStateMessage = GetMessageType<daemon_service, keyring_status_command, TKeyringStatusResponse>;
export declare function keyring_status(daemon: TDaemon): Promise<WsKeyringStateMessage>;
export declare const unlock_keyring_command = "unlock_keyring";
export declare type unlock_keyring_command = typeof unlock_keyring_command;
export declare type TUnlockKeyringRequest = {
    key: string;
};
export declare type TUnlockKeyringResponse = {
    success: bool;
    error: str | None;
};
export declare type WsUnlockKeyringMessage = GetMessageType<daemon_service, unlock_keyring_command, TUnlockKeyringResponse>;
export declare function unlock_keyring(daemon: TDaemon, data: TUnlockKeyringRequest): Promise<WsUnlockKeyringMessage>;
export declare const validate_keyring_passphrase_command = "validate_keyring_passphrase";
export declare type validate_keyring_passphrase_command = typeof validate_keyring_passphrase_command;
export declare type TValidateKeyringPassphraseRequest = {
    key: string;
};
export declare type TValidateKeyringPassphraseResponse = {
    success: bool;
    error: str | None;
};
export declare type WsValidateKeyringPassphraseMessage = GetMessageType<daemon_service, validate_keyring_passphrase_command, TValidateKeyringPassphraseResponse>;
export declare function validate_keyring_passphrase(daemon: TDaemon, data: TValidateKeyringPassphraseRequest): Promise<WsValidateKeyringPassphraseMessage>;
export declare const migrate_keyring_command = "migrate_keyring";
export declare type migrate_keyring_command = typeof migrate_keyring_command;
export declare type TMigrateKeyringRequest = {
    passphrase?: str;
    passphrase_hint?: str;
    save_passphrase?: bool;
    cleanup_legacy_keyring?: bool;
};
export declare type TMigrateKeyringResponse = {
    success: bool;
    error: str | None;
};
export declare type WsMigrateKeyringMessage = GetMessageType<daemon_service, migrate_keyring_command, TMigrateKeyringResponse>;
export declare function migrate_keyring(daemon: TDaemon, data: TMigrateKeyringRequest): Promise<WsMigrateKeyringMessage>;
export declare const set_keyring_passphrase_command = "set_keyring_passphrase";
export declare type set_keyring_passphrase_command = typeof set_keyring_passphrase_command;
export declare type TSetKeyringPassphraseRequest = {
    current_passphrase: str;
    new_passphrase: str;
    passphrase_hint?: str;
    save_passphrase?: bool;
};
export declare type TSetKeyringPassphraseResponse = {
    success: bool;
    error: str;
};
export declare type WsSetKeyringPassphraseMessage = GetMessageType<daemon_service, set_keyring_passphrase_command, TSetKeyringPassphraseResponse>;
export declare function set_keyring_passphrase(daemon: TDaemon, data: TSetKeyringPassphraseRequest): Promise<WsSetKeyringPassphraseMessage>;
export declare const remove_keyring_passphrase_command = "remove_keyring_passphrase";
export declare type remove_keyring_passphrase_command = typeof remove_keyring_passphrase_command;
export declare type TRemoveKeyringPassphraseRequest = {
    current_passphrase: str;
};
export declare type TRemoveKeyringPassphraseResponse = {
    success: bool;
    error: str;
};
export declare type WsRemoveKeyringPassphraseMessage = GetMessageType<daemon_service, remove_keyring_passphrase_command, TRemoveKeyringPassphraseResponse>;
export declare function remove_keyring_passphrase(daemon: TDaemon, data: TRemoveKeyringPassphraseRequest): Promise<WsRemoveKeyringPassphraseMessage>;
export declare const notify_keyring_migration_completed_command = "notify_keyring_migration_completed";
export declare type notify_keyring_migration_completed_command = typeof notify_keyring_migration_completed_command;
export declare type TNotifyKeyringMigrationCompletedRequest = {
    key: str;
};
export declare type TNotifyKeyringMigrationCompletedResponse = {
    success: bool;
    error: str;
};
export declare type WsNotifyKeyringMigrationCompletedMessage = GetMessageType<daemon_service, notify_keyring_migration_completed_command, TNotifyKeyringMigrationCompletedResponse>;
export declare function notify_keyring_migration_completed(daemon: TDaemon, data: TNotifyKeyringMigrationCompletedRequest): Promise<WsNotifyKeyringMigrationCompletedMessage>;
export declare const exit_command = "exit";
export declare type exit_command = typeof exit_command;
export declare type TExitRequest = {};
export declare type TExitResponse = {
    success: bool;
};
export declare type WsExitMessage = GetMessageType<daemon_service, exit_command, TExitResponse>;
export declare function exit(daemon: TDaemon): Promise<WsExitMessage>;
export declare type TPlotQueue = {
    id: str;
    queue: str;
    size: int;
    parallel: bool;
    delay: int;
    state: str;
    error: Optional<str>;
    deleted: bool;
    log_new: str;
    log?: str;
};
export declare const register_service_command = "register_service";
export declare type register_service_command = typeof register_service_command;
export declare type TRegisterServiceRequest = {
    service: str;
};
export declare type TRegisterServiceResponse = {
    success: bool;
} | {
    success: bool;
    service: str;
    queue: TPlotQueue[];
};
export declare type WsRegisterServiceMessage = GetMessageType<daemon_service, register_service_command, TRegisterServiceResponse>;
export declare function register_service(daemon: TDaemon, data: TRegisterServiceRequest): Promise<WsRegisterServiceMessage>;
export declare const get_status_command = "get_status";
export declare type get_status_command = typeof get_status_command;
export declare type TGetStatusRequest = {};
export declare type TGetStatusResponse = {
    success: True;
    genesis_initialized: True;
};
export declare type WsGetStatusMessage = GetMessageType<daemon_service, get_status_command, TGetStatusResponse>;
export declare function get_status(daemon: TDaemon): Promise<WsGetStatusMessage>;
export declare const get_version_command = "get_version";
export declare type get_version_command = typeof get_version_command;
export declare type TGetVersionRequest = {};
export declare type TGetVersionResponse = {
    success: bool;
    version: string;
};
export declare type WsGetVersionMessage = GetMessageType<daemon_service, get_version_command, TGetVersionResponse>;
export declare function get_version(daemon: TDaemon): Promise<WsGetVersionMessage>;
export declare const get_plotters_command = "get_plotters";
export declare type get_plotters_command = typeof get_plotters_command;
export declare type TGetPlottersRequest = {};
export declare type TGetPlottersResponse = {
    success: True;
    plotters: {
        chiapos?: chiapos_install_info;
        bladebit?: bladebit_install_info;
        madmax?: madmax_install_info;
    };
};
export declare type WsGetPlottersMessage = GetMessageType<daemon_service, get_plotters_command, TGetPlottersResponse>;
export declare function get_plotters(daemon: TDaemon): Promise<WsGetPlottersMessage>;
export declare const keyring_status_changed_command = "keyring_status_changed";
export declare type keyring_status_changed_command = typeof keyring_status_changed_command;
export declare type TKeyringStatusChangedBroadCast = {
    keyring_status_changed: TKeyringStatusResponse;
};
export declare type WsKeyringStatusChangedMessage = GetMessageType<daemon_service, keyring_status_changed_command, TKeyringStatusChangedBroadCast>;
export declare function on_keyring_status_changed(daemon: TDaemon, callback: (e: WsKeyringStatusChangedMessage) => unknown): Promise<() => void>;
export declare type WsDaemonMessage = WsExitMessage | WsGetStatusMessage | WsGetVersionMessage | WsGetPlottersMessage | WsRunningServicesMessage | WsIsRunningMessage | WsPingMessage | WsRegisterServiceMessage | WsStartPlottingMessage | WsStartServiceMessage | WsStopPlottingMessage | WsStopServiceMessage | WsAddPrivateKeyMessage | WsCheckKeysMessage | WsDeleteAllKeysMessage | WsDeleteKeyByFingerprintMessage | WsGetAllPrivateKeysMessage | WsGetFirstPrivateKeyMessage | WsGetKeyForFingerprintMessage | WsGetKeyMessage | WsGetKeysMessage | WsSetLabelMessage | WsDeleteLabelMessage | WsIsKeyringLockedMessage | WsKeyringStateMessage | WsUnlockKeyringMessage | WsValidateKeyringPassphraseMessage | WsMigrateKeyringMessage | WsSetKeyringPassphraseMessage | WsRemoveKeyringPassphraseMessage | WsNotifyKeyringMigrationCompletedMessage | WsKeyringStatusChangedMessage;
