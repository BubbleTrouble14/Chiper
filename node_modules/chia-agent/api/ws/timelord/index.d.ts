import { TDaemon } from "../../../daemon/index";
import { GetMessageType } from "../../types";
import { float, uint32, uint64, uint8 } from "../../chia/types/_python_types_";
import { Chain } from "../../chia/timelord/types";
import { VDFInfo, VDFProof } from "../../chia/types/blockchain_format/vdf";
import { bytes32 } from "../../chia/types/blockchain_format/sized_bytes";
export declare const chia_timelord_service = "chia_timelord";
export declare type chia_timelord_service = typeof chia_timelord_service;
export declare const finished_pot_command = "finished_pot";
export declare type finished_pot_command = typeof finished_pot_command;
export declare type TFinishedPotBroadCast = {
    estimated_ips: float;
    iterations_needed: uint64;
    chain: Chain;
    vdf_info: VDFInfo;
    vdf_proof: VDFProof;
};
export declare type WsFinishedPlotMessage = GetMessageType<chia_timelord_service, finished_pot_command, TFinishedPotBroadCast>;
export declare function on_finished_pot(daemon: TDaemon, callback: (e: WsFinishedPlotMessage) => unknown): Promise<() => void>;
export declare const new_compact_proof_command = "new_compact_proof";
export declare type new_compact_proof_command = typeof new_compact_proof_command;
export declare type TNewCompactProofBroadCast = {
    header_hash: bytes32;
    height: uint32;
    field_vdf: uint8;
};
export declare type WsNewCompactProofMessage = GetMessageType<chia_timelord_service, new_compact_proof_command, TNewCompactProofBroadCast>;
export declare function on_new_compact_proof(daemon: TDaemon, callback: (e: WsNewCompactProofMessage) => unknown): Promise<() => void>;
export declare const skipping_peak_command = "skipping_peak";
export declare type skipping_peak_command = typeof skipping_peak_command;
export declare type TSkippingPeakBroadCast = {
    height: uint32;
};
export declare type WsSkippingPeakMessage = GetMessageType<chia_timelord_service, skipping_peak_command, TSkippingPeakBroadCast>;
export declare function on_skipping_peak(daemon: TDaemon, callback: (e: WsSkippingPeakMessage) => unknown): Promise<() => void>;
export declare const new_peak_command = "new_peak";
export declare type new_peak_command = typeof new_peak_command;
export declare type TNewPeakBroadCast = {
    height: uint32;
};
export declare type WsNewPeakMessage = GetMessageType<chia_timelord_service, new_peak_command, TNewPeakBroadCast>;
export declare function on_new_peak(daemon: TDaemon, callback: (e: WsNewPeakMessage) => unknown): Promise<() => void>;
export declare type WsTimelordMessage = WsFinishedPlotMessage | WsNewCompactProofMessage | WsSkippingPeakMessage | WsNewPeakMessage;
