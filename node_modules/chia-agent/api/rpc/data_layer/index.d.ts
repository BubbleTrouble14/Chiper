import { TRPCAgent } from "../../../rpc/index";
import { bool, None, Optional, str, uint64 } from "../../chia/types/_python_types_";
import { TransactionRecord } from "../../chia/wallet/transaction_record";
import { bytes32 } from "../../chia/types/blockchain_format/sized_bytes";
import { OfferMarshalled, OfferStoreMarshalled, SyncStatus } from "../../chia/data_layer/data_layer_util";
import { TCancelOfferResponseDL, TTakeOfferResponseDL } from "../index";
import { GetMessageType, ResType } from "../../types";
import { TDaemon } from "../../../daemon/index";
export declare const chia_data_layer_service = "chia_data_layer";
export declare type chia_data_layer_service = typeof chia_data_layer_service;
export declare const create_data_store_command = "create_data_store";
export declare type create_data_store_command = typeof create_data_store_command;
export declare type TCreateDataStoreRequest = {
    fee?: uint64;
};
export declare type TCreateDataStoreResponse = {
    txs: TransactionRecord[];
    id: str;
};
export declare type WsCreateDataStoreMessage = GetMessageType<chia_data_layer_service, create_data_store_command, TCreateDataStoreResponse>;
export declare function create_data_store<T extends TRPCAgent | TDaemon>(agent: T, params: TCreateDataStoreRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TCreateDataStoreResponse, WsCreateDataStoreMessage>>;
export declare const get_owned_stores_command = "get_owned_stores";
export declare type get_owned_stores_command = typeof get_owned_stores_command;
export declare type TGetOwnedStoresResponse = {
    store_ids: str[];
};
export declare type WsGetOwnedStoresMessage = GetMessageType<chia_data_layer_service, get_owned_stores_command, TGetOwnedStoresResponse>;
export declare function get_owned_stores<T extends TRPCAgent | TDaemon>(agent: T): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetOwnedStoresResponse, WsGetOwnedStoresMessage>>;
export declare const batch_update_command = "batch_update";
export declare type batch_update_command = typeof batch_update_command;
export declare type TBatchUpdateRequest = {
    fee?: uint64;
    changelist: Array<{
        key: str;
        reference_node_hash?: str;
        side?: 0 | 1;
        value?: str;
    }>;
    id: str;
};
export declare type TBatchUpdateResponse = {
    tx_id: bytes32;
};
export declare type WsBatchUpdateMessage = GetMessageType<chia_data_layer_service, batch_update_command, TBatchUpdateResponse>;
export declare function batch_update<T extends TRPCAgent | TDaemon>(agent: T, params: TBatchUpdateRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TBatchUpdateResponse, WsBatchUpdateMessage>>;
export declare const get_value_command = "get_value";
export declare type get_value_command = typeof get_value_command;
export declare type TGetValueRequest = {
    id: str;
    key: str;
    root_hash?: str;
};
export declare type TGetValueResponse = {
    value: str | None;
};
export declare type WsGetValueMessage = GetMessageType<chia_data_layer_service, get_value_command, TGetValueResponse>;
export declare function get_value<T extends TRPCAgent | TDaemon>(agent: T, params: TGetValueRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetValueResponse, WsGetValueMessage>>;
export declare const get_keys_command = "get_keys";
export declare type get_keys_command = typeof get_keys_command;
export declare type TGetKeysRequest = {
    id: str;
    root_hash?: str;
};
export declare type TGetKeysResponse = {
    keys: str[];
};
export declare type WsGetKeysMessage = GetMessageType<chia_data_layer_service, get_keys_command, TGetKeysResponse>;
export declare function get_keys<T extends TRPCAgent | TDaemon>(agent: T, params: TGetKeysRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetKeysResponse, WsGetKeysMessage>>;
export declare const get_keys_values_command = "get_keys_values";
export declare type get_keys_values_command = typeof get_keys_values_command;
export declare type TGetKeysValuesRequest = {
    id: str;
    root_hash?: str;
};
export declare type TGetKeysValuesResponse = {
    keys_values: Array<{
        hash: str;
        key: str;
        value: str;
    }>;
};
export declare type WsGetKeysValuesMessage = GetMessageType<chia_data_layer_service, get_keys_values_command, TGetKeysValuesResponse>;
export declare function get_keys_values<T extends TRPCAgent | TDaemon>(agent: T, params: TGetKeysValuesRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetKeysValuesResponse, WsGetKeysValuesMessage>>;
export declare const get_ancestors_command = "get_ancestors";
export declare type get_ancestors_command = typeof get_ancestors_command;
export declare type TGetAncestorsRequest = {
    id: str;
    hash: str;
};
export declare type TGetAncestorsResponse = {
    ancestors: Array<{
        hash: bytes32;
        left_hash: bytes32;
        right_hash: bytes32;
    }>;
};
export declare type WsGetAncestorsMessage = GetMessageType<chia_data_layer_service, get_ancestors_command, TGetAncestorsResponse>;
export declare function get_ancestors<T extends TRPCAgent | TDaemon>(agent: T, params: TGetAncestorsRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetAncestorsResponse, WsGetAncestorsMessage>>;
export declare const get_root_command = "get_root";
export declare type get_root_command = typeof get_root_command;
export declare type TGetRootRequest = {
    id: str;
};
export declare type TGetRootResponse = {
    hash: bytes32;
    confirmed: bool;
    timestamp: uint64;
};
export declare type WsGetRootMessage = GetMessageType<chia_data_layer_service, get_root_command, TGetRootResponse>;
export declare function get_root<T extends TRPCAgent | TDaemon>(agent: T, params: TGetRootRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetRootResponse, WsGetRootMessage>>;
export declare const get_local_root_command = "get_local_root";
export declare type get_local_root_command = typeof get_local_root_command;
export declare type TGetLocalRootRequest = {
    id: str;
};
export declare type TGetLocalRootResponse = {
    hash: bytes32 | None;
};
export declare type WsGetLocalRootMessage = GetMessageType<chia_data_layer_service, get_local_root_command, TGetLocalRootResponse>;
export declare function get_local_root<T extends TRPCAgent | TDaemon>(agent: T, params: TGetLocalRootRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetLocalRootResponse, WsGetLocalRootMessage>>;
export declare const get_roots_command = "get_roots";
export declare type get_roots_command = typeof get_roots_command;
export declare type TGetRootsRequest = {
    ids: str[];
};
export declare type TGetRootsResponse = {
    root_hashes: Array<{
        id: bytes32;
        hash: bytes32;
        confirmed: bool;
        timestamp: uint64;
    }>;
};
export declare type WsGetRootsMessage = GetMessageType<chia_data_layer_service, get_roots_command, TGetRootsResponse>;
export declare function get_roots<T extends TRPCAgent | TDaemon>(agent: T, params: TGetRootsRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetRootsResponse, WsGetRootsMessage>>;
export declare const delete_key_command = "delete_key";
export declare type delete_key_command = typeof delete_key_command;
export declare type TDeleteKeyRequest = {
    fee?: uint64;
    key: str;
    id: str;
};
export declare type TDeleteKeyResponse = {
    tx_id: bytes32;
};
export declare type WsDeleteKeyMessage = GetMessageType<chia_data_layer_service, delete_key_command, TDeleteKeyResponse>;
export declare function delete_key<T extends TRPCAgent | TDaemon>(agent: T, params: TDeleteKeyRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TDeleteKeyResponse, WsDeleteKeyMessage>>;
export declare const insert_command = "insert";
export declare type insert_command = typeof insert_command;
export declare type TInsertRequest = {
    fee?: uint64;
    key: str;
    value: str;
    id: str;
};
export declare type TInsertResponse = {
    tx_id: bytes32;
};
export declare type WsInsertMessage = GetMessageType<chia_data_layer_service, insert_command, TInsertResponse>;
export declare function insert<T extends TRPCAgent | TDaemon>(agent: T, params: TInsertRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TInsertResponse, WsInsertMessage>>;
export declare const subscribe_command = "subscribe";
export declare type subscribe_command = typeof subscribe_command;
export declare type TSubscribeRequest = {
    id: str;
    urls: str[];
};
export declare type TSubscribeResponse = {};
export declare type WsSubscribeMessage = GetMessageType<chia_data_layer_service, subscribe_command, TSubscribeResponse>;
export declare function subscribe<T extends TRPCAgent | TDaemon>(agent: T, params: TSubscribeRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TSubscribeResponse, WsSubscribeMessage>>;
export declare const unsubscribe_command = "unsubscribe";
export declare type unsubscribe_command = typeof unsubscribe_command;
export declare type TUnsubscribeRequest = {
    id: str;
};
export declare type TUnsubscribeResponse = {};
export declare type WsUnsubscribeMessage = GetMessageType<chia_data_layer_service, unsubscribe_command, TUnsubscribeResponse>;
export declare function unsubscribe<T extends TRPCAgent | TDaemon>(agent: T, params: TUnsubscribeRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TUnsubscribeResponse, WsUnsubscribeMessage>>;
export declare const add_mirror_command = "add_mirror";
export declare type add_mirror_command = typeof add_mirror_command;
export declare type TAddMirrorRequest = {
    id: str;
    urls: str[];
    amount: uint64;
    fee?: uint64;
};
export declare type TAddMirrorResponse = {};
export declare type WsAddMirrorMessage = GetMessageType<chia_data_layer_service, add_mirror_command, TAddMirrorResponse>;
export declare function add_mirror<T extends TRPCAgent | TDaemon>(agent: T, params: TAddMirrorRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TAddMirrorResponse, WsAddMirrorMessage>>;
export declare const delete_mirror_command = "delete_mirror";
export declare type delete_mirror_command = typeof delete_mirror_command;
export declare type TDeleteMirrorRequest = {
    coin_id: str;
    fee?: uint64;
};
export declare type TDeleteMirrorResponse = {};
export declare type WsDeleteMirrorMessage = GetMessageType<chia_data_layer_service, delete_mirror_command, TDeleteMirrorResponse>;
export declare function delete_mirror<T extends TRPCAgent | TDaemon>(agent: T, params: TDeleteMirrorRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TDeleteMirrorResponse, WsDeleteMirrorMessage>>;
export declare const get_mirrors_command = "get_mirrors";
export declare type get_mirrors_command = typeof get_mirrors_command;
export declare type TGetMirrorsRequest = {
    id: str;
};
export declare type TGetMirrorsResponse = {
    mirrors: Array<{
        coin_id: str;
        launcher_id: str;
        amount: uint64;
        urls: str[];
        ours: bool;
    }>;
};
export declare type WsGetMirrorsMessage = GetMessageType<chia_data_layer_service, get_mirrors_command, TGetMirrorsResponse>;
export declare function get_mirrors<T extends TRPCAgent | TDaemon>(agent: T, params: TGetMirrorsRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetMirrorsResponse, WsGetMirrorsMessage>>;
export declare const remove_subscriptions_command = "remove_subscriptions";
export declare type remove_subscriptions_command = typeof remove_subscriptions_command;
export declare type TRemoveSubscriptionsRequest = {
    id: str;
    urls: str[];
};
export declare type TRemoveSubscriptionsResponse = {};
export declare type WsRemoveSubscriptionsMessage = GetMessageType<chia_data_layer_service, remove_subscriptions_command, TRemoveSubscriptionsResponse>;
export declare function remove_subscriptions<T extends TRPCAgent | TDaemon>(agent: T, params: TRemoveSubscriptionsRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TRemoveSubscriptionsResponse, WsRemoveSubscriptionsMessage>>;
export declare const subscriptions_command = "subscriptions";
export declare type subscriptions_command = typeof subscriptions_command;
export declare type TSubscriptionsResponse = {
    store_ids: str[];
};
export declare type WsSubscriptionsMessage = GetMessageType<chia_data_layer_service, subscriptions_command, TSubscriptionsResponse>;
export declare function subscriptions<T extends TRPCAgent | TDaemon>(agent: T): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TSubscriptionsResponse, WsSubscriptionsMessage>>;
export declare const get_kv_diff_command = "get_kv_diff";
export declare type get_kv_diff_command = typeof get_kv_diff_command;
export declare type TGetKvDiffRequest = {
    id: str;
    hash_1: str;
    hash_2: str;
};
export declare type TGetKvDiffResponse = {
    diff: Array<{
        type: str;
        key: str;
        value: str;
    }>;
};
export declare type WsGetKvDiffMessage = GetMessageType<chia_data_layer_service, get_kv_diff_command, TGetKvDiffResponse>;
export declare function get_kv_diff<T extends TRPCAgent | TDaemon>(agent: T, params: TGetKvDiffRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetKvDiffResponse, WsGetKvDiffMessage>>;
export declare const get_root_history_command = "get_root_history";
export declare type get_root_history_command = typeof get_root_history_command;
export declare type TGetRootHistoryRequest = {
    id: str;
};
export declare type TGetRootHistoryResponse = {
    root_history: Array<{
        root_hash: bytes32;
        confirmed: bool;
        timestamp: uint64;
    }>;
};
export declare type WsGetRootHistoryMessage = GetMessageType<chia_data_layer_service, get_root_history_command, TGetRootHistoryResponse>;
export declare function get_root_history<T extends TRPCAgent | TDaemon>(agent: T, params: TGetRootHistoryRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetRootHistoryResponse, WsGetRootHistoryMessage>>;
export declare const add_missing_files_command = "add_missing_files";
export declare type add_missing_files_command = typeof add_missing_files_command;
export declare type TAddMissingFilesRequest = {
    ids?: str[];
    overwrite?: bool;
    foldername?: str;
};
export declare type TAddMissingFilesResponse = {};
export declare type WsAddMissingFilesMessage = GetMessageType<chia_data_layer_service, add_missing_files_command, TAddMissingFilesResponse>;
export declare function add_missing_files<T extends TRPCAgent | TDaemon>(agent: T, params: TAddMissingFilesRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TAddMissingFilesResponse, WsAddMissingFilesMessage>>;
export declare const make_offer_command = "make_offer";
export declare type make_offer_command = typeof make_offer_command;
export declare type TMakeOfferRequest = {
    fee?: uint64;
    maker: OfferStoreMarshalled;
    taker: OfferStoreMarshalled;
};
export declare type TMakeOfferResponse = {
    success: bool;
    offer: OfferMarshalled;
};
export declare type WsMakeOfferMessage = GetMessageType<chia_data_layer_service, make_offer_command, TMakeOfferResponse>;
export declare function make_offer<T extends TRPCAgent | TDaemon>(agent: T, params: TMakeOfferRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TMakeOfferResponse, WsMakeOfferMessage>>;
export declare const take_offer_command = "take_offer";
export declare type take_offer_command = typeof take_offer_command;
export declare type TTakeOfferRequest = {
    fee?: uint64;
    offer: OfferMarshalled;
};
export declare type TTakeOfferResponse = {
    success: bool;
    trade_id: str;
};
export declare type WsTakeOfferMessageDL = GetMessageType<chia_data_layer_service, take_offer_command, TTakeOfferResponse>;
export declare function take_offer<T extends TRPCAgent | TDaemon>(agent: T, params: TTakeOfferRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TTakeOfferResponseDL, WsTakeOfferMessageDL>>;
export declare const verify_offer_command = "verify_offer";
export declare type verify_offer_command = typeof verify_offer_command;
export declare type TVerifyOfferRequest = {
    fee?: uint64;
    offer: OfferMarshalled;
};
export declare type TVerifyOfferResponse = {
    success: bool;
    valid: bool;
    error: Optional<str>;
    fee: Optional<uint64>;
};
export declare type WsVerifyOfferMessage = GetMessageType<chia_data_layer_service, verify_offer_command, TVerifyOfferResponse>;
export declare function verify_offer<T extends TRPCAgent | TDaemon>(agent: T, params: TVerifyOfferRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TVerifyOfferResponse, WsVerifyOfferMessage>>;
export declare const cancel_offer_command = "cancel_offer";
export declare type cancel_offer_command = typeof cancel_offer_command;
export declare type TCancelOfferRequest = {
    trade_id: str;
    secure: bool;
    fee?: uint64;
};
export declare type TCancelOfferResponse = {
    success: bool;
};
export declare type WsCancelOfferMessageDL = GetMessageType<chia_data_layer_service, cancel_offer_command, TCancelOfferResponse>;
export declare function cancel_offer<T extends TRPCAgent | TDaemon>(agent: T, params: TCancelOfferRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TCancelOfferResponseDL, WsCancelOfferMessageDL>>;
export declare const get_sync_status_command = "get_sync_status";
export declare type get_sync_status_command = typeof get_sync_status_command;
export declare type TGetSyncStatusRequest = {
    id: str;
};
export declare type TGetSyncStatusResponse = {
    sync_status: SyncStatus;
};
export declare type WsGetSyncStatusMessage = GetMessageType<chia_data_layer_service, get_sync_status_command, TGetSyncStatusResponse>;
export declare function get_sync_status<T extends TRPCAgent | TDaemon>(agent: T, params: TGetSyncStatusRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetSyncStatusResponse, WsGetSyncStatusMessage>>;
export declare type RpcDataLayerMessage = TCreateDataStoreResponse | TGetOwnedStoresResponse | TBatchUpdateResponse | TGetValueResponse | TGetKeysResponse | TGetKeysValuesResponse | TGetAncestorsResponse | TGetRootResponse | TGetLocalRootResponse | TGetRootsResponse | TDeleteKeyResponse | TInsertResponse | TSubscribeResponse | TUnsubscribeResponse | TAddMirrorResponse | TDeleteMirrorResponse | TGetMirrorsResponse | TRemoveSubscriptionsResponse | TSubscriptionsResponse | TGetKvDiffResponse | TGetRootHistoryResponse | TAddMissingFilesResponse | TMakeOfferResponse | TTakeOfferResponseDL | TVerifyOfferResponse | TCancelOfferResponseDL | TGetSyncStatusResponse;
export declare type RpcDataLayerMessageOnWs = WsCreateDataStoreMessage | WsGetOwnedStoresMessage | WsBatchUpdateMessage | WsGetValueMessage | WsGetKeysMessage | WsGetKeysValuesMessage | WsGetAncestorsMessage | WsGetRootMessage | WsGetLocalRootMessage | WsGetRootsMessage | WsDeleteKeyMessage | WsInsertMessage | WsSubscribeMessage | WsUnsubscribeMessage | WsAddMirrorMessage | WsDeleteMirrorMessage | WsGetMirrorsMessage | WsRemoveSubscriptionsMessage | WsSubscriptionsMessage | WsGetKvDiffMessage | WsGetRootHistoryMessage | WsAddMissingFilesMessage | WsMakeOfferMessage | WsTakeOfferMessageDL | WsVerifyOfferMessage | WsCancelOfferMessageDL | WsGetSyncStatusMessage;
