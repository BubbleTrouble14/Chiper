import { ProofOfSpace } from "../../chia/types/blockchain_format/proof_of_space";
import { bool, int, Optional, str, uint32, uint64, uint8 } from "../../chia/types/_python_types_";
import { bytes32 } from "../../chia/types/blockchain_format/sized_bytes";
import { TRPCAgent } from "../../../rpc/index";
import { PoolState } from "../../chia/farmer/farmer";
import { Receiver } from "../../chia/plot-sync/receiver";
import { Plot } from "../../chia/protocols/harvester_protocol";
import { GetMessageType, ResType } from "../../types";
import { TDaemon } from "../../../daemon/index";
export declare const chia_farmer_service = "chia_farmer";
export declare type chia_farmer_service = typeof chia_farmer_service;
export declare const get_signage_point_command = "get_signage_point";
export declare type get_signage_point_command = typeof get_signage_point_command;
export declare type TGetSignagePointRequest = {
    sp_hash: str;
};
export declare type TGetSignagePointResponse = {
    signage_point: {
        challenge_hash: bytes32;
        challenge_chain_sp: bytes32;
        reward_chain_sp: bytes32;
        difficulty: uint64;
        sub_slot_iters: uint64;
        signage_point_index: uint8;
    };
    proofs: [string, ProofOfSpace];
};
export declare type WsGetSignagePointMessage = GetMessageType<chia_farmer_service, get_signage_point_command, TGetSignagePointResponse>;
export declare function get_signage_point<T extends TRPCAgent | TDaemon>(agent: T, params: TGetSignagePointRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetSignagePointResponse, WsGetSignagePointMessage>>;
export declare const get_signage_points_command = "get_signage_points";
export declare type get_signage_points_command = typeof get_signage_points_command;
export declare type TGetSignagePointsRequest = {};
export declare type TGetSignagePointsResponse = {
    signage_points: TGetSignagePointResponse[];
};
export declare type WsGetSignagePointsMessage = GetMessageType<chia_farmer_service, get_signage_points_command, TGetSignagePointsResponse>;
export declare function get_signage_points<T extends TRPCAgent | TDaemon>(agent: T): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetSignagePointsResponse, WsGetSignagePointsMessage>>;
export declare const get_reward_targets_command = "get_reward_targets";
export declare type get_reward_targets_command = typeof get_reward_targets_command;
export declare type TGetRewardTargetRequest = {
    search_for_private_key: bool;
    max_ph_to_search?: int;
};
export declare type TGetRewardTargetResponse = {
    farmer_target: str;
    pool_target: str;
    have_farmer_sk: bool;
    have_pool_sk: bool;
} | {
    farmer_target: str;
    pool_target: str;
};
export declare type WsGetRewardTargetsMessage = GetMessageType<chia_farmer_service, get_reward_targets_command, TGetRewardTargetResponse>;
export declare function get_reward_targets<T extends TRPCAgent | TDaemon>(agent: T, params: TGetRewardTargetRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetRewardTargetResponse, WsGetRewardTargetsMessage>>;
export declare const set_reward_targets_command = "set_reward_targets";
export declare type set_reward_targets_command = typeof set_reward_targets_command;
export declare type TSetRewardTargetRequest = {
    farmer_target?: str;
    pool_target?: str;
};
export declare type TSetRewardTargetResponse = {};
export declare type WsSetRewardTargetsMessage = GetMessageType<chia_farmer_service, set_reward_targets_command, TSetRewardTargetResponse>;
export declare function set_reward_targets<T extends TRPCAgent | TDaemon>(agent: T, params: TSetRewardTargetRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TSetRewardTargetResponse, WsSetRewardTargetsMessage>>;
export declare const get_pool_state_command = "get_pool_state";
export declare type get_pool_state_command = typeof get_pool_state_command;
export declare type TGetPoolStateRequest = {};
export declare type TGetPoolStateResponse = {
    pool_state: PoolState[];
};
export declare type WsGetPoolStateMessage = GetMessageType<chia_farmer_service, get_pool_state_command, TGetPoolStateResponse>;
export declare function get_pool_state<T extends TRPCAgent | TDaemon>(agent: T): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetPoolStateResponse, WsGetPoolStateMessage>>;
export declare const set_payout_instructions_command = "set_payout_instructions";
export declare type set_payout_instructions_command = typeof set_payout_instructions_command;
export declare type TSetPayoutInstructionsRequest = {
    launcher_id: str;
    payout_instructions: str;
};
export declare type TSetPayoutInstructionsResponse = {};
export declare type WsSetPayoutInstructionsMessage = GetMessageType<chia_farmer_service, set_payout_instructions_command, TSetPayoutInstructionsResponse>;
export declare function set_pool_payout_instructions<T extends TRPCAgent | TDaemon>(agent: T, params: TSetPayoutInstructionsRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TSetPayoutInstructionsResponse, WsSetPayoutInstructionsMessage>>;
export declare const get_harvesters_command = "get_harvesters";
export declare type get_harvesters_command = typeof get_harvesters_command;
export declare type TGetHarvestersRequest = {};
export declare type TGetHarvestersResponse = {
    harvesters: Receiver[];
};
export declare type WsGetHarvestersMessage = GetMessageType<chia_farmer_service, get_harvesters_command, TGetHarvestersResponse>;
export declare function get_harvesters<T extends TRPCAgent | TDaemon>(agent: T): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetHarvestersResponse, WsGetHarvestersMessage>>;
export declare const get_harvesters_summary_command = "get_harvesters_summary";
export declare type get_harvesters_summary_command = typeof get_harvesters_summary_command;
export declare type TGetHarvestersSummaryResponse = {
    harvesters: Receiver<true>[];
};
export declare type WsGetHarvestersSummaryMessage = GetMessageType<chia_farmer_service, get_harvesters_summary_command, TGetHarvestersSummaryResponse>;
export declare function get_harvesters_summary<T extends TRPCAgent | TDaemon>(agent: T): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetHarvestersSummaryResponse, WsGetHarvestersSummaryMessage>>;
export declare const get_harvester_plots_valid_command = "get_harvester_plots_valid";
export declare type get_harvester_plots_valid_command = typeof get_harvester_plots_valid_command;
export declare type TGetHarvesterPlotsValidRequest = {
    node_id: bytes32;
    page: uint32;
    page_size: uint32;
    filter: Array<{
        key: str;
        value: Optional<str>;
    }>;
    sort_key: str;
    reverse: bool;
};
export declare type TGetHarvesterPlotsValidResponse = {
    node_id: str;
    page: uint32;
    page_count: uint32;
    total_count: int;
    plots: Plot[];
};
export declare type WsGetHarvesterPlotsValidMessage = GetMessageType<chia_farmer_service, get_harvester_plots_valid_command, TGetHarvesterPlotsValidResponse>;
export declare function get_harvester_plots_valid<T extends TRPCAgent | TDaemon>(agent: T, param: TGetHarvesterPlotsValidRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetHarvesterPlotsValidResponse, WsGetHarvesterPlotsValidMessage>>;
export declare const get_harvester_plots_invalid_command = "get_harvester_plots_invalid";
export declare type get_harvester_plots_invalid_command = typeof get_harvester_plots_invalid_command;
export declare type TGetHarvesterPlotsInvalidRequest = {
    node_id: bytes32;
    page: uint32;
    page_count: uint32;
    filter: str[];
    reverse: bool;
};
export declare type TGetHarvesterPlotsInvalidResponse = {
    node_id: str;
    page: uint32;
    page_count: uint32;
    total_count: int;
    plots: str[];
};
export declare type WsGetHarvesterPlotsInvalidMessage = GetMessageType<chia_farmer_service, get_harvester_plots_invalid_command, TGetHarvesterPlotsInvalidResponse>;
export declare function get_harvester_plots_invalid<T extends TRPCAgent | TDaemon>(agent: T, param: TGetHarvesterPlotsInvalidRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetHarvesterPlotsInvalidResponse, WsGetHarvesterPlotsInvalidMessage>>;
export declare const get_harvester_plots_keys_missing_command = "get_harvester_plots_keys_missing";
export declare type get_harvester_plots_keys_missing_command = typeof get_harvester_plots_keys_missing_command;
export declare type TGetHarvesterPlotsKeysMissingRequest = {
    node_id: bytes32;
    page: uint32;
    page_count: uint32;
    filter: str[];
    reverse: bool;
};
export declare type TGetHarvesterPlotsKeysMissingResponse = {
    node_id: str;
    page: uint32;
    page_count: uint32;
    total_count: int;
    plots: str[];
};
export declare type WsGetHarvesterPlotsKeysMissingMessage = GetMessageType<chia_farmer_service, get_harvester_plots_keys_missing_command, TGetHarvesterPlotsKeysMissingResponse>;
export declare function get_harvester_plots_keys_missing<T extends TRPCAgent | TDaemon>(agent: T, param: TGetHarvesterPlotsKeysMissingRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetHarvesterPlotsKeysMissingResponse, WsGetHarvesterPlotsKeysMissingMessage>>;
export declare const get_harvester_plots_duplicates_command = "get_harvester_plots_duplicates";
export declare type get_harvester_plots_duplicates_command = typeof get_harvester_plots_duplicates_command;
export declare type TGetHarvesterPlotsDuplicatesRequest = {
    node_id: bytes32;
    page: uint32;
    page_count: uint32;
    filter: str[];
    reverse: bool;
};
export declare type TGetHarvesterPlotsDuplicatesResponse = {
    node_id: str;
    page: uint32;
    page_count: uint32;
    total_count: int;
    plots: str[];
};
export declare type WsGetHarvesterPlotsDuplicatesMessage = GetMessageType<chia_farmer_service, get_harvester_plots_duplicates_command, TGetHarvesterPlotsDuplicatesResponse>;
export declare function get_harvester_plots_duplicates<T extends TRPCAgent | TDaemon>(agent: T, param: TGetHarvesterPlotsDuplicatesRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetHarvesterPlotsDuplicatesResponse, WsGetHarvesterPlotsDuplicatesMessage>>;
export declare const get_pool_login_link_command = "get_pool_login_link";
export declare type get_pool_login_link_command = typeof get_pool_login_link_command;
export declare type TGetPoolLinkRequest = {
    launcher_id: str;
};
export declare type TGetPoolLinkResponse = {
    login_link: str;
};
export declare type WsGetPoolLinkMessage = GetMessageType<chia_farmer_service, get_pool_login_link_command, TGetPoolLinkResponse>;
export declare function get_pool_login_link<T extends TRPCAgent | TDaemon>(agent: T, params: TGetPoolLinkRequest): Promise<import("../../../rpc/index").ErrorResponse | ResType<T, TGetPoolLinkResponse, WsGetPoolLinkMessage>>;
export declare type RpcFarmerMessage = TGetRewardTargetResponse | TGetSignagePointResponse | TGetSignagePointsResponse | TSetRewardTargetResponse | TGetHarvestersResponse | TGetHarvestersSummaryResponse | TGetHarvesterPlotsValidResponse | TGetHarvesterPlotsInvalidResponse | TGetHarvesterPlotsKeysMissingResponse | TGetHarvesterPlotsDuplicatesResponse | TSetPayoutInstructionsResponse | TGetPoolStateResponse | TGetPoolLinkResponse;
export declare type RpcFarmerMessageOnWs = WsGetRewardTargetsMessage | WsGetSignagePointMessage | WsGetSignagePointsMessage | WsSetRewardTargetsMessage | WsGetHarvestersMessage | WsGetHarvestersSummaryMessage | WsGetHarvesterPlotsValidMessage | WsGetHarvesterPlotsInvalidMessage | WsGetHarvesterPlotsKeysMissingMessage | WsGetHarvesterPlotsDuplicatesMessage | WsSetPayoutInstructionsMessage | WsGetPoolStateMessage | WsGetPoolLinkMessage;
